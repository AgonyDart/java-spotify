/*
vsc * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tap_u1t2.Views;

import com.mycompany.tap_u1t2.Controllers.SongManager;
import com.mycompany.tap_u1t2.Controllers.PlaylistManager;
import com.mycompany.tap_u1t2.Models.Playlist;
import com.mycompany.tap_u1t2.Models.Song;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author angel
 */
public class Spotify extends javax.swing.JFrame {

    /**
     * Creates new form Spotify
     */
    public Spotify() {
        initComponents();
        // myInitComponents();
        initData();
        dragAndDrop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPlaylistPanel = new javax.swing.JPanel();
        jBtnAddPlaylist = new javax.swing.JButton();
        jControlPanel = new javax.swing.JPanel();
        jBtnToggleMusic = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jBtnNextSong = new javax.swing.JButton();
        jBtnPrevSong = new javax.swing.JButton();
        timeProgressiveLabel = new javax.swing.JLabel();
        timeEndLabel = new javax.swing.JLabel();
        jBrowserSongsPanelDefault = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(999, 810));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPlaylistPanel.setBackground(new java.awt.Color(25, 20, 20));
        jPlaylistPanel.setMaximumSize(new java.awt.Dimension(480, 540));
        jPlaylistPanel.setMinimumSize(new java.awt.Dimension(480, 540));
        jPlaylistPanel.setPreferredSize(new java.awt.Dimension(480, 540));

        jBtnAddPlaylist.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jBtnAddPlaylist.setForeground(new java.awt.Color(255, 255, 255));
        jBtnAddPlaylist.setText("+");
        jBtnAddPlaylist.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jBtnAddPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAddPlaylistActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPlaylistPanelLayout = new javax.swing.GroupLayout(jPlaylistPanel);
        jPlaylistPanel.setLayout(jPlaylistPanelLayout);
        jPlaylistPanelLayout.setHorizontalGroup(
                jPlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPlaylistPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jBtnAddPlaylist)
                                .addContainerGap(432, Short.MAX_VALUE)));
        jPlaylistPanelLayout.setVerticalGroup(
                jPlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPlaylistPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jBtnAddPlaylist)
                                .addContainerGap(572, Short.MAX_VALUE)));

        getContentPane().add(jPlaylistPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 620));

        jControlPanel.setBackground(new java.awt.Color(35, 35, 35));
        jControlPanel
                .setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(157, 157, 157)));
        jControlPanel.setMaximumSize(new java.awt.Dimension(1920, 270));
        jControlPanel.setMinimumSize(new java.awt.Dimension(1920, 270));
        jControlPanel.setPreferredSize(new java.awt.Dimension(1920, 270));
        jControlPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jBtnToggleMusic.setBackground(new java.awt.Color(29, 185, 84));
        jBtnToggleMusic.setBorder(null);
        jBtnToggleMusic.setMaximumSize(new java.awt.Dimension(64, 64));
        jBtnToggleMusic.setMinimumSize(new java.awt.Dimension(64, 64));
        jBtnToggleMusic.setPreferredSize(new java.awt.Dimension(64, 64));
        jBtnToggleMusic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseClicked(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseExited(evt);
            }
        });
        jBtnToggleMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnToggleMusicActionPerformed(evt);
            }
        });
        jControlPanel.add(jBtnToggleMusic, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 130, 130));

        jProgressBar1.setBackground(new java.awt.Color(60, 60, 60));
        jProgressBar1.setForeground(new java.awt.Color(255, 255, 255));
        jProgressBar1.setBorder(null);
        jProgressBar1.setBorderPainted(false);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setMaximumSize(new java.awt.Dimension(760, 46));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(760, 16));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(760, 18));
        jControlPanel.add(jProgressBar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, -1, 10));

        jBtnNextSong.setBackground(new java.awt.Color(35, 35, 35));
        jBtnNextSong.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jBtnNextSong.setText("|<");
        jBtnNextSong.setForeground(new java.awt.Color(35, 35, 35));

        jBtnNextSong.setBorder(null);
        jBtnNextSong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnNextSongMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnNextSongMouseExited(evt);
            }
        });
        jBtnNextSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNextSongActionPerformed(evt);
            }
        });
        jControlPanel.add(jBtnNextSong, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 60, 60));

        jBtnPrevSong.setBackground(new java.awt.Color(35, 35, 35));
        jBtnPrevSong.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jBtnPrevSong.setText(">|");
        jBtnPrevSong.setBorder(null);
        jBtnPrevSong.setForeground(new java.awt.Color(35, 35, 35));
        jBtnPrevSong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnPrevSongMouseEntered(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnPrevSongMouseExited(evt);
            }
        });
        jBtnPrevSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPrevSongActionPerformed(evt);
            }
        });
        jControlPanel.add(jBtnPrevSong, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 50, 60, 60));

        timeProgressiveLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        timeProgressiveLabel.setForeground(new java.awt.Color(153, 153, 153));
        jControlPanel.add(timeProgressiveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 70, 50));

        timeEndLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        timeEndLabel.setForeground(new java.awt.Color(153, 153, 153));
        jControlPanel.add(timeEndLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 110, 70, 50));

        getContentPane().add(jControlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 620, 1000, 190));

        jBrowserSongsPanelDefault.setBackground(new java.awt.Color(35, 35, 35));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(238, 238, 238));
        jLabel1.setText("<html>Primero crea <br> una Playlist</html>");

        javax.swing.GroupLayout jBrowserSongsPanelDefaultLayout = new javax.swing.GroupLayout(
                jBrowserSongsPanelDefault);
        jBrowserSongsPanelDefault.setLayout(jBrowserSongsPanelDefaultLayout);
        jBrowserSongsPanelDefaultLayout.setHorizontalGroup(
                jBrowserSongsPanelDefaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                jBrowserSongsPanelDefaultLayout.createSequentialGroup()
                                        .addContainerGap(41, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 634,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(35, 35, 35)));
        jBrowserSongsPanelDefaultLayout.setVerticalGroup(
                jBrowserSongsPanelDefaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jBrowserSongsPanelDefaultLayout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 500,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(73, Short.MAX_VALUE)));

        getContentPane().add(jBrowserSongsPanelDefault,
                new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, 710, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // private void myInitComponents() {
    //
    // }

    private void dragAndDrop() {
        // Hacer que el panel sea un área de DropTarget
        new DropTarget(jBrowserSongsPanelDefault, new java.awt.dnd.DropTargetListener() {
            @Override
            public void dragEnter(java.awt.dnd.DropTargetDragEvent dtde) {
                // Do nothing
            }

            @Override
            public void dragOver(java.awt.dnd.DropTargetDragEvent dtde) {
                // Do nothing
            }

            @Override
            public void dropActionChanged(java.awt.dnd.DropTargetDragEvent dtde) {
                // Do nothing
            }

            @Override
            public void dragExit(java.awt.dnd.DropTargetEvent dte) {
                // Do nothing
            }

            @Override
            public void drop(DropTargetDropEvent event) {
                try {
                    // Aceptar el drop
                    event.acceptDrop(event.getDropAction());

                    // Obtener los archivos arrastrados
                    java.util.List<File> droppedFiles = (java.util.List<File>) event.getTransferable()
                            .getTransferData(DataFlavor.javaFileListFlavor);

                    // Procesar solo archivos .wav
                    for (File file : droppedFiles) {
                        if (file.getName().toLowerCase().endsWith(".wav")) {
                            try {
                                String title;
                                // Crear un nuevo objeto Song
                                if (file.getName().split("-")[1].split("\\.")[0].trim().length() > 16) {
                                    title = file.getName().split("-")[1].split("\\.")[0].trim().substring(0, 16)
                                            + "...";
                                } else {
                                    title = file.getName().split("-")[1].split("\\.")[0].trim();
                                }

                                Song newSong = new Song(title.trim(),
                                        file.getName().split("-")[0].trim(), file.getAbsolutePath());

                                System.out
                                        .println("New Song: " + newSong.getTitle() + " - " + newSong.getArtist() + " - "
                                                + newSong.getPathname());
                                // Añadir la canción a la playlist actual
                                playlistManager.getCurrentPlaying().addSong(newSong);
                            } catch (Exception e) {
                                String title;
                                // Crear un nuevo objeto Song
                                if (file.getName().split("\\.")[0].trim().length() > 16) {
                                    title = file.getName().split("\\.")[0].trim().substring(0, 16) + "...";
                                } else {
                                    title = file.getName().split("\\.")[0].trim();
                                }
                                Song newSong = new Song(file.getName().split("\\.")[0].trim(), "Unknown",
                                        file.getAbsolutePath());
                                System.out
                                        .println("New Song: " + newSong.getTitle() + " - " + newSong.getArtist() + " - "
                                                + newSong.getPathname());
                                playlistManager.getCurrentPlaying().addSong(newSong);
                            }

                            // Mostrar la canción en la lista
                            handleShowSong(playlistManager.getCurrentPlaying(), jBrowserSongsPanelDefault);
                        } else {
                            System.out.println("Archivo no válido: " + file.getName());
                            javax.swing.JOptionPane.showMessageDialog(null, "Archivo no válido: " + file.getName());
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(null, "Error al procesar el archivo: " + ex.getMessage());
                }
            }
        });
    }

    private void initData() {
        try {
            // playlist[0] = new Song("Ew", "Joji", "./assets/music/testingSongs/ew.wav");
            // playlist[1] = new Song("Welcome to Chilis", "Yung Gravy & bbno$",
            // "./assets/music/testingSongs/chilis.wav");
            // playlist[2] = new Song("Arre (Prod by Myd)", "Simpson Ahuevo",
            // "./assets/music/testingSongs/arre.wav");
            // playlist[3] = new Song("Al Compás De Mi Caballo", "Los Imperials",
            // "./assets/music/testingSongs/caballo.wav");
            // playlist[4] = new Song("Computer Talk", "austenyo",
            // "./assets/music/testingSongs/ctalk.wav");
            // playlist[5] = new Song("Lock Me Up", "Sullivan King",
            // "./assets/music/testingSongs/lockme.wav");
            // playlist[6] = new Song("Ando al Ciego", "George Rhoads",
            // "./assets/music/testingSongs/ciego.wav");
            // playlist[7] = new Song("egoplayer", "Orslok",
            // "./assets/music/testingSongs/egoplayer.wav");
            // playlist[8] = new Song("My Time", "bo en",
            // "./assets/music/testingSongs/oyasumi.wav");
            // playlist[9] = new Song("One Last Kiss", "Hikaru Utada",
            // "./assets/music/testingSongs/wanlaskis.wav");
            //
            // playlist[10] = new Song("when you sleep", "my bloody valentine",
            // "./assets/music/instagram/wenusleep.wav");
            // playlist[11] = new Song("Time After Time", "Chet Baker",
            // "./assets/music/instagram/timeaftertime.wav");
            // playlist[12] = new Song("DKC - Theme", "Donkey Kong Country",
            // "./assets/music/instagram/dk.wav");
            // playlist[13] = new Song("Trust Issues", "Drake",
            // "./assets/music/instagram/drake.wav");
            // playlist[14] = new Song("no me caigo tan bien", "Carlos Colosio",
            // "./assets/music/instagram/caigo.wav");
            // playlist[15] = new Song("Cheating is a Crime", "Takayan",
            // "./assets/music/instagram/takayan.wav");
            // playlist[16] = new Song("Yonaguni", "Bad Bunny",
            // "./assets/music/instagram/yonaguni.wav");
            //
            // playlist[17] = new Song("MANTRA", "Bring Me The Horizon",
            // "./assets/music/amo/mantra.wav");
            // playlist[18] = new Song("mother tongue", "Bring Me The Horizon",
            // "./assets/music/amo/mothertongue.wav");
            // playlist[19] = new Song("in the dark", "Bring Me The Horizon",
            // "./assets/music/amo/dark.wav");
            // playlist[20] = new Song("ouch", "Bring Me The Horizon",
            // "./assets/music/amo/ouch.wav");
            // playlist[21] = new Song("sugar honey ice & tea", "Bring Me The Horizon",
            // "./assets/music/amo/shit.wav");
            // playlist[22] = new Song("wonderful life", "Bring Me The Horizon",
            // "./assets/music/amo/wonderfullife.wav");
            // System.out.println("precharged data");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void jBtnNextSongActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBtnNextSongActionPerformed
        try {
            nextSong();
        } catch (Exception e) {
        }
    }// GEN-LAST:event_jBtnNextSongActionPerformed

    private void jBtnToggleMusicActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBtnToggleMusicActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_jBtnToggleMusicActionPerformed

    private void jBtnToggleMusicMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnToggleMusicMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }// GEN-LAST:event_jBtnToggleMusicMouseEntered

    private void jBtnToggleMusicMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnToggleMusicMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }// GEN-LAST:event_jBtnToggleMusicMouseExited

    private void jBtnToggleMusicMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnToggleMusicMouseClicked
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
            togglePlayImg();
        } catch (Exception e) {
            System.out.println("e:" + e);
        }
    }// GEN-LAST:event_jBtnToggleMusicMouseClicked

    private void jBtnPrevSongActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBtnPrevSongActionPerformed
        // if (currentSong.getClip().getMicrosecondPosition() <= LENGTH_PREV) {
        // try {
        // myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
        // myPlayer.togglePlay(lastSong.getClip(), jProgressBar1);
        // } catch (Exception e) {
        // }
        // } else {
        // }
        myPlayer.resetSongWithBar(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
            togglePlayImg();
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_jBtnPrevSongActionPerformed

    private void jBtnPrevSongMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnPrevSongMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }// GEN-LAST:event_jBtnPrevSongMouseEntered

    private void jBtnNextSongMouseEntered(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnNextSongMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }// GEN-LAST:event_jBtnNextSongMouseEntered

    private void jBtnPrevSongMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnPrevSongMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }// GEN-LAST:event_jBtnPrevSongMouseExited

    private void jBtnNextSongMouseExited(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jBtnNextSongMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }// GEN-LAST:event_jBtnNextSongMouseExited

    private void jBtnAddPlaylistMouseEntered(java.awt.event.MouseEvent evt) {
        setCursor(Cursor.HAND_CURSOR);
    }

    private void jBtnAddPlaylistMouseExited(java.awt.event.MouseEvent evt) {
        setCursor(Cursor.DEFAULT_CURSOR);
    }

    private void jBtnAddPlaylistActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jBtnAddPlaylistActionPerformed
        // System.out.println("Create new playlist and render");
        String playlistName = javax.swing.JOptionPane.showInputDialog(this, "Introduce el nombre de la Playlist:",
                "Nueva Playlist",
                javax.swing.JOptionPane.PLAIN_MESSAGE);
        if (playlistName != null && !playlistName.trim().isEmpty()) {
            // Create a new playlist and add it to the manager
            Playlist newPlaylist = new Playlist(playlistName.trim());
            playlistManager.addPlaylist(newPlaylist);

            // Create a new label for the playlist
            JLabel newPlaylistLabel = new JLabel(playlistName);
            newPlaylistLabel.setFont(new Font("Calibri", Font.BOLD, 24));
            newPlaylistLabel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT);
            newPlaylistLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 16, 8, 0));
            newPlaylistLabel.setForeground(Color.WHITE);

            // Add code to update the UI with the new playlist
            jPlaylistPanel.setLayout(new javax.swing.BoxLayout(jPlaylistPanel, javax.swing.BoxLayout.Y_AXIS));
            // Fix btn padding at repaint layout
            jBtnAddPlaylist.setBorder(javax.swing.BorderFactory.createEmptyBorder(16, 16, 20, 0));
            jBtnAddPlaylist.setForeground(Color.WHITE);
            jLabel1.setVisible(false);

            // Add a mouse listener to handle clicks
            newPlaylistLabel.addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    for (Component comp : jPlaylistPanel.getComponents()) {
                        if (comp instanceof JLabel) {
                            // Highlight this playlist and reset others
                            ((JLabel) comp).setForeground(Color.WHITE);
                            // Set this as currentPlaylist
                            // Show song list for this playlist
                        }
                    }
                    newPlaylistLabel.setForeground(Color.GREEN);
                    playlistManager.setCurrentPlaying(newPlaylist);
                    System.out.println("Playlist playing: " + playlistManager.getCurrentPlaying());
                    System.out.println("Playlist name: " + playlistManager.getCurrentPlaying().getName());
                    for (Song song : playlistManager.getCurrentPlaying().getSongsArray()) {
                        System.out.println("Song: " + song.getTitle());
                    }

                    handleShowSong(newPlaylist, jBrowserSongsPanelDefault);
                }

                @Override
                public void mouseEntered(MouseEvent e) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                }

                @Override
                public void mouseExited(MouseEvent e) {
                    setCursor(Cursor.getDefaultCursor());
                }
            });

            jPlaylistPanel.add(newPlaylistLabel);
            jPlaylistPanel.revalidate();
            jPlaylistPanel.repaint();

            // Simulate a click on the new playlist label
            newPlaylistLabel
                    .dispatchEvent(new MouseEvent(newPlaylistLabel, MouseEvent.MOUSE_CLICKED, 0, 0, 0, 0, 1, false));
        } else {
            System.out.println("Playlist creation cancelled or invalid name.");
        }
    }// GEN-LAST:event_jBtnAddPlaylistActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Spotify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jBrowserSongsPanelDefault;
    private javax.swing.JButton jBtnAddPlaylist;
    private javax.swing.JButton jBtnNextSong;
    private javax.swing.JButton jBtnPrevSong;
    private javax.swing.JButton jBtnToggleMusic;
    private javax.swing.JPanel jControlPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPlaylistPanel;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel timeEndLabel;
    private javax.swing.JLabel timeProgressiveLabel;
    // End of variables declaration//GEN-END:variables

    // Custom vars
    private SongManager myPlayer = new SongManager();
    private PlaylistManager playlistManager = new PlaylistManager();
    private Color grenSpotify = new Color(29, 185, 84);
    private Song currentSong = null;
    private Song lastSong = null;
    private JLabel currentLabel = null;
    private JLabel lastLabel = null;
    private JLabel currentLabelArtist = null;
    private JLabel lastLabelArtist = null;
    private JLabel currentLabelDuration = null;
    private JLabel lastLabelDuration = null;
    private String imgPlay = "./assets/img/tgBtnPlay128px.png";
    private int LENGTH_PREV = 5000000;
    private int TO_SECONDS = 1000000;
    private int TO_MINUTES = 60;
    private String imgPause = "./assets/img/tgBtnPause128px.png";
    private String currentAlbum = "";

    public Song playlist[] = new Song[23];
    private JLabel labels[] = new JLabel[23];

    // fn custom
    private void togglePlayImg() {
        if (myPlayer.getIsPlaying()) {
            jBtnToggleMusic.setIcon(new ImageIcon(imgPause));
        } else {
            jBtnToggleMusic.setIcon(new ImageIcon(imgPlay));
            // jBtnNextSong.setForeground(Color.WHITE);
            // jBtnPrevSong.setForeground(Color.WHITE);
        }
    }

    // testing
    private void handleShowPanel(JPanel jpanel) {
        jpanel.setSize(1040, 540);
        jpanel.setLocation(0, 0);
        jBrowserSongsPanelDefault.removeAll();
        jBrowserSongsPanelDefault.add(jpanel, BorderLayout.CENTER);
        jBrowserSongsPanelDefault.revalidate();
        jBrowserSongsPanelDefault.repaint();
    }

    private void changeSong() {

    }

    private void handleShowSong(Playlist playlist, JPanel fatherPanel) {
        int x = 52;
        int y = 52;
        int count = 0;
        Song[] songs = playlist.getSongsArray();
        fatherPanel.removeAll();
        System.out.println("Songs: " + songs.length);
        if (songs.length == 0) {
            JLabel jLabelAddSong = new JLabel(
                    "<html>Playlist vacía <br><br> Para empezar, arrastra <br> una canción en .wav</html>");
            jLabelAddSong.setForeground(Color.WHITE);
            jLabelAddSong.setFont(new Font("Calibri", Font.BOLD, 36));
            Dimension labelSize = jLabelAddSong.getPreferredSize();
            jLabelAddSong.setBounds(64, 96, labelSize.width + 10, labelSize.height);

            fatherPanel.add(jLabelAddSong);

            fatherPanel.revalidate();
            fatherPanel.repaint();
        } else {
            for (Song song : songs) {
                jLabel1.setVisible(false);
                // if (song.getPathname().contains(album)) {
                JLabel title = new JLabel(song.getTitle());
                JLabel artist = new JLabel(song.getArtist());
                JLabel duration = new JLabel(microToMinutes(song.getClip().getMicrosecondLength()));

                title.setForeground(Color.WHITE);
                artist.setForeground(Color.GRAY);
                duration.setForeground(Color.GRAY);

                Font titleFont = new Font("Calibri", 1, 24);
                Font artistFont = new Font("Calibri", 0, 20);

                title.setFont(titleFont);
                artist.setFont(artistFont);
                duration.setFont(artistFont);

                Dimension titleSize = title.getPreferredSize();
                Dimension artistSize = artist.getPreferredSize();

                title.setBounds(x, y, titleSize.width + 10, titleSize.height);
                artist.setBounds(x + 375, y, artistSize.width + 10, artistSize.height);
                duration.setBounds(x + 550, y, artistSize.width + 10, artistSize.height);

                labels[count] = title;
                // System.out.println(labels[count].getText());
                count++;

                MouseListener l = new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        try {
                            lastSong = currentSong;
                            lastLabel = currentLabel;
                            lastLabelArtist = currentLabelArtist;
                            lastLabelDuration = currentLabelDuration;

                            currentSong = song;
                            currentLabel = title;
                            currentLabelArtist = artist;
                            currentLabelDuration = duration;

                            timeEndLabel.setText(duration.getText());
                            timeEndLabel.setForeground(Color.GRAY);
                            timeProgressiveLabel.setText("0:00");
                            timeProgressiveLabel.setForeground(Color.GRAY);

                            // System.out.println(currentSong.getTitle());
                            // System.out.println(lastSong.getTitle());
                            if (lastLabel != null) {
                                lastLabel.setForeground(Color.WHITE);
                                lastLabelArtist.setForeground(Color.GRAY);
                                lastLabelDuration.setForeground(Color.GRAY);
                            }
                            currentLabel.setForeground(Color.GREEN);
                            currentLabelArtist.setForeground(Color.GREEN);
                            currentLabelDuration.setForeground(Color.GREEN);

                            if (lastSong != currentSong) {
                                myPlayer.resetSongWithBar(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
                                if (lastSong != null) {
                                    myPlayer.togglePlay(lastSong.getClip(), jProgressBar1, timeProgressiveLabel);
                                    lastSong.getClip().stop();
                                }
                            }

                            myPlayer.togglePlay(song.getClip(), jProgressBar1, timeProgressiveLabel);
                            // int i = getIndex(playlist, currentSong);
                            // System.out.println(i);
                            // System.out.println(getIndexAtAlbum(playlist, currentSong, album));
                            togglePlayImg();
                        } catch (UnsupportedAudioFileException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (LineUnavailableException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        setCursor(Cursor.HAND_CURSOR);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        setCursor(Cursor.DEFAULT_CURSOR);
                    }
                };
                title.addMouseListener(l);

                fatherPanel.add(title);
                fatherPanel.add(artist);
                fatherPanel.add(duration);
                y += 50;

                fatherPanel.revalidate();
                fatherPanel.repaint();
                // }
            }
        }
    }

    private String microToMinutes(long micro) {
        String convertion = "";
        int seconds = (int) (micro / TO_SECONDS);
        String minutes = String.valueOf(seconds / TO_MINUTES);
        String remaining = String.valueOf(seconds % TO_MINUTES);
        convertion = minutes + ":" + remaining;
        return convertion;
    }

    private int getIndex(Song playlist[], Song song) {
        int index = 0;
        for (int i = 0; song != playlist[i]; i++) {
            index = i + 1;
        }
        return index;
    }

    private int getIndexAtAlbum(Song playlist[], Song song, String album) {
        int index = 0;
        for (int i = 0; song != playlist[i]; i++) {
            if (playlist[i].getPathname().contains(album)) {
                index++;
            }
        }
        return index;
    }

    private void nextSong() {
        int currentSongIndex = getIndex(playlist, currentSong);
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
            lastSong = currentSong;
            currentLabel = labels[getIndexAtAlbum(playlist, currentSong, currentAlbum)];
            myPlayer.resetSongWithBar(lastSong.getClip(), jProgressBar1, timeProgressiveLabel);
            currentSong = playlist[currentSongIndex + 1];
            labels[getIndexAtAlbum(playlist, currentSong, currentAlbum) - 1].setForeground(Color.WHITE);
            labels[getIndexAtAlbum(playlist, currentSong, currentAlbum)].setForeground(grenSpotify);
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1, timeProgressiveLabel);
        } catch (Exception e) {
        }
    }
}

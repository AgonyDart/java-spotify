/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tap_u1t2;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author angel
 */
public class Spotify extends javax.swing.JFrame {

    /**
     * Creates new form Spotify
     */
    public Spotify() {
        initComponents();
        myInitComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPlaylistPanel = new javax.swing.JPanel();
        jPlaylistTitle1 = new javax.swing.JLabel();
        jPlaylistTitle2 = new javax.swing.JLabel();
        jPlaylistTitle3 = new javax.swing.JLabel();
        jControlPanel = new javax.swing.JPanel();
        jBtnToggleMusic = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jBtnNextSong = new javax.swing.JButton();
        jBtnPrevSong = new javax.swing.JButton();
        timeProgressiveLabel = new javax.swing.JLabel();
        timeEndLabel = new javax.swing.JLabel();
        jBrowserSongsPanelDefault = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1920, 1080));
        setMinimumSize(new java.awt.Dimension(1020, 810));
        setPreferredSize(new java.awt.Dimension(1520, 810));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPlaylistPanel.setBackground(new java.awt.Color(25, 20, 20));
        jPlaylistPanel.setMaximumSize(new java.awt.Dimension(480, 540));
        jPlaylistPanel.setMinimumSize(new java.awt.Dimension(480, 540));
        jPlaylistPanel.setPreferredSize(new java.awt.Dimension(480, 540));

        jPlaylistTitle1.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jPlaylistTitle1.setForeground(new java.awt.Color(238, 238, 238));
        jPlaylistTitle1.setText("Test Playlist");
        jPlaylistTitle1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPlaylistTitle1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPlaylistTitle1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPlaylistTitle1MouseExited(evt);
            }
        });

        jPlaylistTitle2.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jPlaylistTitle2.setForeground(new java.awt.Color(238, 238, 238));
        jPlaylistTitle2.setText("Instagram Playlist");
        jPlaylistTitle2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPlaylistTitle2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPlaylistTitle2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPlaylistTitle2MouseExited(evt);
            }
        });

        jPlaylistTitle3.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jPlaylistTitle3.setForeground(new java.awt.Color(238, 238, 238));
        jPlaylistTitle3.setText("amo");
        jPlaylistTitle3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPlaylistTitle3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPlaylistTitle3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPlaylistTitle3MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPlaylistPanelLayout = new javax.swing.GroupLayout(jPlaylistPanel);
        jPlaylistPanel.setLayout(jPlaylistPanelLayout);
        jPlaylistPanelLayout.setHorizontalGroup(
            jPlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlaylistPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPlaylistTitle1)
                    .addComponent(jPlaylistTitle2)
                    .addComponent(jPlaylistTitle3))
                .addContainerGap(181, Short.MAX_VALUE))
        );
        jPlaylistPanelLayout.setVerticalGroup(
            jPlaylistPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlaylistPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jPlaylistTitle1)
                .addGap(44, 44, 44)
                .addComponent(jPlaylistTitle2)
                .addGap(44, 44, 44)
                .addComponent(jPlaylistTitle3)
                .addContainerGap(276, Short.MAX_VALUE))
        );

        getContentPane().add(jPlaylistPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jControlPanel.setBackground(new java.awt.Color(35, 35, 35));
        jControlPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(157, 157, 157)));
        jControlPanel.setMaximumSize(new java.awt.Dimension(1920, 270));
        jControlPanel.setMinimumSize(new java.awt.Dimension(1920, 270));
        jControlPanel.setPreferredSize(new java.awt.Dimension(1920, 270));

        jBtnToggleMusic.setBackground(new java.awt.Color(29, 185, 84));
        jBtnToggleMusic.setIcon(new javax.swing.ImageIcon("C:\\Users\\angel\\Pictures\\spotify_buttons\\tgBtnPlay128px.png")); // NOI18N
        jBtnToggleMusic.setBorder(null);
        jBtnToggleMusic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnToggleMusicMouseExited(evt);
            }
        });
        jBtnToggleMusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnToggleMusicActionPerformed(evt);
            }
        });

        jProgressBar1.setBackground(new java.awt.Color(60, 60, 60));
        jProgressBar1.setForeground(new java.awt.Color(255, 255, 255));
        jProgressBar1.setBorder(null);
        jProgressBar1.setBorderPainted(false);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setMaximumSize(new java.awt.Dimension(760, 46));
        jProgressBar1.setMinimumSize(new java.awt.Dimension(760, 16));
        jProgressBar1.setPreferredSize(new java.awt.Dimension(760, 18));

        jBtnNextSong.setBackground(new java.awt.Color(157, 157, 157));
        jBtnNextSong.setIcon(new javax.swing.ImageIcon("C:\\Users\\angel\\Pictures\\spotify_buttons\\btnNext64px.png")); // NOI18N
        jBtnNextSong.setBorder(null);
        jBtnNextSong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnNextSongMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnNextSongMouseExited(evt);
            }
        });
        jBtnNextSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnNextSongActionPerformed(evt);
            }
        });

        jBtnPrevSong.setBackground(new java.awt.Color(157, 157, 157));
        jBtnPrevSong.setIcon(new javax.swing.ImageIcon("C:\\Users\\angel\\Pictures\\spotify_buttons\\btnPrev64px.png")); // NOI18N
        jBtnPrevSong.setBorder(null);
        jBtnPrevSong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBtnPrevSongMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBtnPrevSongMouseExited(evt);
            }
        });
        jBtnPrevSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnPrevSongActionPerformed(evt);
            }
        });

        timeProgressiveLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        timeEndLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        javax.swing.GroupLayout jControlPanelLayout = new javax.swing.GroupLayout(jControlPanel);
        jControlPanel.setLayout(jControlPanelLayout);
        jControlPanelLayout.setHorizontalGroup(
            jControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jControlPanelLayout.createSequentialGroup()
                .addGroup(jControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jControlPanelLayout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(timeProgressiveLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(timeEndLabel))
                    .addGroup(jControlPanelLayout.createSequentialGroup()
                        .addGap(608, 608, 608)
                        .addComponent(jBtnPrevSong)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnToggleMusic)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnNextSong)))
                .addContainerGap(815, Short.MAX_VALUE))
        );
        jControlPanelLayout.setVerticalGroup(
            jControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jControlPanelLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(jControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(timeProgressiveLabel)
                    .addGroup(jControlPanelLayout.createSequentialGroup()
                        .addGroup(jControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jControlPanelLayout.createSequentialGroup()
                                .addComponent(jBtnToggleMusic)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jControlPanelLayout.createSequentialGroup()
                                .addComponent(jBtnNextSong)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jControlPanelLayout.createSequentialGroup()
                                .addComponent(jBtnPrevSong)
                                .addGap(53, 53, 53)))
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(timeEndLabel))
                .addGap(53, 53, 53))
        );

        getContentPane().add(jControlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 540, 1920, -1));

        jBrowserSongsPanelDefault.setBackground(new java.awt.Color(35, 35, 35));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(238, 238, 238));
        jLabel1.setText("<html> Selecciona una playlist <br> para escoger una cancion :D </html>");

        javax.swing.GroupLayout jBrowserSongsPanelDefaultLayout = new javax.swing.GroupLayout(jBrowserSongsPanelDefault);
        jBrowserSongsPanelDefault.setLayout(jBrowserSongsPanelDefaultLayout);
        jBrowserSongsPanelDefaultLayout.setHorizontalGroup(
            jBrowserSongsPanelDefaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBrowserSongsPanelDefaultLayout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(377, Short.MAX_VALUE))
        );
        jBrowserSongsPanelDefaultLayout.setVerticalGroup(
            jBrowserSongsPanelDefaultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBrowserSongsPanelDefaultLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(190, Short.MAX_VALUE))
        );

        getContentPane().add(jBrowserSongsPanelDefault, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, 1130, 540));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void myInitComponents() {

    }

    private void initData() {
        try {
            playlist[0] = new Song("Ew", "Joji", "./assets/music/testingSongs/ew.wav");
            playlist[1] = new Song("Welcome to Chilis", "Yung Gravy & bbno$", "./assets/music/testingSongs/chilis.wav");
            playlist[2] = new Song("Arre (Prod by Myd)", "Simpson Ahuevo", "./assets/music/testingSongs/arre.wav");
            playlist[3] = new Song("Al Compás De Mi Caballo", "Los Imperials", "./assets/music/testingSongs/caballo.wav");
            playlist[4] = new Song("Computer Talk", "austenyo", "./assets/music/testingSongs/ctalk.wav");
            playlist[5] = new Song("Lock Me Up", "Sullivan King", "./assets/music/testingSongs/lockme.wav");
            playlist[6] = new Song("Ando al Ciego", "George Rhoads", "./assets/music/testingSongs/ciego.wav");    
            playlist[7] = new Song("egoplayer", "Orslok", "./assets/music/testingSongs/egoplayer.wav");
            playlist[8] = new Song("My Time", "bo en", "./assets/music/testingSongs/oyasumi.wav");
            playlist[9] = new Song("One Last Kiss", "Hikaru Utada", "./assets/music/testingSongs/wanlaskis.wav");
            
            playlist[10] = new Song("when you sleep", "my bloody valentine", "./assets/music/instagram/wenusleep.wav");
            playlist[11] = new Song("Time After Time", "Chet Baker", "./assets/music/instagram/timeaftertime.wav");
            playlist[12] = new Song("DKC - Theme", "Donkey Kong Country", "./assets/music/instagram/dk.wav");
            playlist[13] = new Song("Trust Issues", "Drake", "./assets/music/instagram/drake.wav");
            playlist[14] = new Song("no me caigo tan bien", "Carlos Colosio", "./assets/music/instagram/caigo.wav");
            playlist[15] = new Song("Cheating is a Crime", "Takayan", "./assets/music/instagram/takayan.wav");
            playlist[16] = new Song("Yonaguni", "Bad Bunny", "./assets/music/instagram/yonaguni.wav");
            
            playlist[17] = new Song("MANTRA", "Bring Me The Horizon", "./assets/music/amo/mantra.wav");
            playlist[18] = new Song("mother tongue", "Bring Me The Horizon", "./assets/music/amo/mothertongue.wav");
            playlist[19] = new Song("in the dark", "Bring Me The Horizon", "./assets/music/amo/dark.wav");
            playlist[20] = new Song("ouch", "Bring Me The Horizon", "./assets/music/amo/ouch.wav");
            playlist[21] = new Song("sugar honey ice & tea", "Bring Me The Horizon", "./assets/music/amo/shit.wav");
            playlist[22] = new Song("wonderful life", "Bring Me The Horizon", "./assets/music/amo/wonderfullife.wav");
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void jBtnNextSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNextSongActionPerformed
        try {
            nextSong();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jBtnNextSongActionPerformed

    private void jPlaylistTitle1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle1MouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle1MouseEntered

    private void jPlaylistTitle1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle1MouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle1MouseExited

    private void jPlaylistTitle1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle1MouseClicked
        BrowserSongTester testerPanel = new BrowserSongTester();
        currentAlbum = "testingSongs";
        handleShowPanel(testerPanel);
        handleShowSong(playlist, "testingSongs", testerPanel);

    }//GEN-LAST:event_jPlaylistTitle1MouseClicked

    private void jBtnToggleMusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnToggleMusicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBtnToggleMusicActionPerformed

    private void jBtnToggleMusicMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnToggleMusicMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jBtnToggleMusicMouseEntered

    private void jBtnToggleMusicMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnToggleMusicMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jBtnToggleMusicMouseExited

    private void jBtnToggleMusicMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnToggleMusicMouseClicked
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
            togglePlayImg();
        } catch (Exception e) {
            System.out.println("e:" + e);
        }
    }//GEN-LAST:event_jBtnToggleMusicMouseClicked

    private void jPlaylistTitle2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle2MouseClicked
        BrowserSongTester instagramPanel = new BrowserSongTester();
        currentAlbum = "instagram";
        handleShowPanel(instagramPanel);
        handleShowSong(playlist, "instagram", instagramPanel);
    }//GEN-LAST:event_jPlaylistTitle2MouseClicked

    private void jPlaylistTitle2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle2MouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle2MouseEntered

    private void jPlaylistTitle2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle2MouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle2MouseExited

    private void jPlaylistTitle3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle3MouseClicked
        BrowserSongTester amoPanel = new BrowserSongTester();
        currentAlbum = "amo";
        handleShowPanel(amoPanel);
        handleShowSong(playlist, "amo", amoPanel);
    }//GEN-LAST:event_jPlaylistTitle3MouseClicked

    private void jPlaylistTitle3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle3MouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle3MouseEntered

    private void jPlaylistTitle3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaylistTitle3MouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jPlaylistTitle3MouseExited

    private void jBtnPrevSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnPrevSongActionPerformed
//        if (currentSong.getClip().getMicrosecondPosition() <= LENGTH_PREV) {
//            try {
//                myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
//                myPlayer.togglePlay(lastSong.getClip(), jProgressBar1);
//            } catch (Exception e) {
//            }
//        } else {
//        }
        myPlayer.resetSongWithBar(currentSong.getClip(), jProgressBar1);
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
            togglePlayImg();
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBtnPrevSongActionPerformed

    private void jBtnPrevSongMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnPrevSongMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jBtnPrevSongMouseEntered

    private void jBtnNextSongMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnNextSongMouseEntered
        setCursor(Cursor.HAND_CURSOR);
    }//GEN-LAST:event_jBtnNextSongMouseEntered

    private void jBtnPrevSongMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnPrevSongMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jBtnPrevSongMouseExited

    private void jBtnNextSongMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBtnNextSongMouseExited
        setCursor(Cursor.DEFAULT_CURSOR);
    }//GEN-LAST:event_jBtnNextSongMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Spotify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Spotify().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jBrowserSongsPanelDefault;
    private javax.swing.JButton jBtnNextSong;
    private javax.swing.JButton jBtnPrevSong;
    private javax.swing.JButton jBtnToggleMusic;
    private javax.swing.JPanel jControlPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPlaylistPanel;
    private javax.swing.JLabel jPlaylistTitle1;
    private javax.swing.JLabel jPlaylistTitle2;
    private javax.swing.JLabel jPlaylistTitle3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel timeEndLabel;
    private javax.swing.JLabel timeProgressiveLabel;
    // End of variables declaration//GEN-END:variables

    // Custom vars
    private MusicPlayer myPlayer = new MusicPlayer();
    private Color grenSpotify = new Color(29, 185, 84);
    private Song currentSong = null;
    private Song lastSong = null;
    private JLabel currentLabel = null;
    private JLabel lastLabel = null;
    private String imgPlay = "./assets/img/tgBtnPlay128px.png";
    private int LENGTH_PREV = 5000000;
    private int TO_SECONDS = 1000000;
    private int TO_MINUTES = 60;
    private String imgPause = "./assets/img/tgBtnPause128px.png";
    private String currentAlbum = "";

    public Song playlist[] = new Song[23];
    private JLabel labels[] = new JLabel[23];

    // fn custom
    private void togglePlayImg() {
        if (myPlayer.getIsPlaying()) {
            jBtnToggleMusic.setIcon(new ImageIcon(imgPause));
        } else {
            jBtnToggleMusic.setIcon(new ImageIcon(imgPlay));
        }
    }

    // testing
    private void handleShowPanel(JPanel jpanel) {
        jpanel.setSize(1040, 540);
        jpanel.setLocation(0, 0);
        jBrowserSongsPanelDefault.removeAll();
        jBrowserSongsPanelDefault.add(jpanel, BorderLayout.CENTER);
        jBrowserSongsPanelDefault.revalidate();
        jBrowserSongsPanelDefault.repaint();
    }
    
    private void changeSong(){
        
    }

    private void handleShowSong(Song playlist[], String album, JPanel fatherPanel) {
        int x = 50;
        int y = 35;
        int count = 0;
        for (Song song : playlist) {
            if (song.getPathname().contains(album)) {
                JLabel title = new JLabel(song.getTitle());
                JLabel artist = new JLabel(song.getArtist());
                JLabel duration = new JLabel(microToMinutes(song.getClip().getMicrosecondLength()));

                title.setForeground(Color.WHITE);
                artist.setForeground(Color.GRAY);
                duration.setForeground(Color.GRAY);

                Font titleFont = new Font("Calibri", 1, 24);
                Font artistFont = new Font("Calibri", 0, 20);

                title.setFont(titleFont);
                artist.setFont(artistFont);
                duration.setFont(artistFont);

                Dimension titleSize = title.getPreferredSize();
                Dimension artistSize = artist.getPreferredSize();

                title.setBounds(x, y, titleSize.width + 10, titleSize.height);
                artist.setBounds(x + 500, y, artistSize.width + 10, artistSize.height);
                duration.setBounds(x + 750, y, artistSize.width + 10, artistSize.height);

                labels[count] = title;
//                System.out.println(labels[count].getText());
                count++;
                
                MouseListener l = new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        try {
                            lastSong = currentSong;
                            lastLabel = currentLabel;
                            
                            currentSong = song;
                            currentLabel = title;

                            //System.out.println(currentSong.getTitle());
                            //System.out.println(lastSong.getTitle());
                            if (lastLabel != null) {
                                lastLabel.setForeground(Color.WHITE);
                            }
                            currentLabel.setForeground(grenSpotify);

                            if (lastSong != currentSong) {
                                myPlayer.resetSongWithBar(currentSong.getClip(), jProgressBar1);
                                if (lastSong != null){
                                    myPlayer.togglePlay(lastSong.getClip(), jProgressBar1);
                                    lastSong.getClip().stop();
                                }
                            }
                            
                            myPlayer.togglePlay(song.getClip(), jProgressBar1);
//                            int i = getIndex(playlist, currentSong);
//                            System.out.println(i);
//                            System.out.println(getIndexAtAlbum(playlist, currentSong, album));
                            togglePlayImg();
                        } catch (UnsupportedAudioFileException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (LineUnavailableException ex) {
                            Logger.getLogger(Spotify.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {

                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {

                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                        setCursor(Cursor.HAND_CURSOR);
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                        setCursor(Cursor.DEFAULT_CURSOR);
                    }
                };
                title.addMouseListener(l);

                fatherPanel.add(title);
                fatherPanel.add(artist);
                fatherPanel.add(duration);
                y += 50;
            }
        }
    }

    private String microToMinutes(long micro) {
        String convertion = "";
        int seconds = (int) (micro / TO_SECONDS);
        String minutes = String.valueOf(seconds / TO_MINUTES);
        String remaining = String.valueOf(seconds % TO_MINUTES);
        convertion = minutes + ":" + remaining;
        return convertion;
    }

    private int getIndex(Song playlist[], Song song) {
        int index = 0;
        for (int i = 0; song != playlist[i]; i++) {
            index = i + 1;
        }
        return index;
    }
    
    private int getIndexAtAlbum(Song playlist[], Song song, String album) {
        int index = 0;
        for (int i = 0; song != playlist[i]; i++) {
            if (playlist[i].getPathname().contains(album)) {
                index++;
            }
        }
        return index;
    }
    
    private void nextSong() {
        int currentSongIndex = getIndex(playlist, currentSong);
        try {
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
            lastSong = currentSong;
            currentLabel = labels[getIndexAtAlbum(playlist, currentSong, currentAlbum)];
            myPlayer.resetSongWithBar(lastSong.getClip(), jProgressBar1);
            currentSong = playlist[currentSongIndex + 1];
            labels[getIndexAtAlbum(playlist, currentSong, currentAlbum) - 1].setForeground(Color.WHITE);
            labels[getIndexAtAlbum(playlist, currentSong, currentAlbum)].setForeground(grenSpotify);
            myPlayer.togglePlay(currentSong.getClip(), jProgressBar1);
        } catch (Exception e) {
        }
    }
}
